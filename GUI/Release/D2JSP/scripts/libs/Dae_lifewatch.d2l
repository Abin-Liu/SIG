// A copy/paste form pwnlifewatch from Pwnage Pindle
// but link with sets objects and timer only affect normal potion not reju
// 0.25 Add delay and correct 1 mistake
// add a rejuthresh for merc too
// try to support monothread approch
// 0.27 do not use too much reju for merc (as decribed in 0.25 but no fonctionnal !!)
// 0.35c problem if only hp position when you reach the lvl reju with no reju (thx to eosphoros)
// 0.45d recheck if merc is revived when we change area
// 0.45f can use potion in inventory (Durante)
// 0.45g if life < 20% or mana < 20% => try to use full reju before small
// 0.45g silent mode

var PwnPots=new Object();	//Ignore this line
// Chicken and Potion settings
//====================================================================
// If you use a number over 99 for the chicken totals, it will use a static number instead of a percent!
// chickenlife=x		This is your chicken life percentage.  If you go below this life total, the game will exit.
// chickenmana=x		This is your chicken mana percentage.  If you go below this mana total, the game will exit.
// LifeThresh=x			Drink a normal potion if under this % life
// ManaThresh=x			Drink a normal potion if under this % mana
// LifeRejuvThresh=x		Drink a potion if under this % life or % mana combined with LifeThresh
// ManaRejuvThresh=x		Drink a potion if under this % life or % mana combined with ManaThresh
// MercFavorsJuves=true/false	Set this to true to use rejuvs on your merc before other potions
// mercpotionlife=x		This is the threshold to use a life potion on your merc
// mercpotionreju=x		This is the threshold to use a reju potion on your merc
// DrinkTimer=x			But dont drink more than one potion for this number of seconds
// noPotsChicken=true/false	If true, chicken if you need a pot and none are left
// mercChickenLife=x		this is your mercs chicken life percentage.  If he goes below this life total, the game will exit.
// deadMercChicken=true/false	if true, chicken if your merc dies
// LoopDelay=x			This is the time your script will pause in between each life check
// IgnorePosition=true/false	Set this to true, and you will drink any potion in your belt, not just those readily clickable
// QuitOnHostile=true/false	If this is true, you will quit when hostiled.

PwnPots["chickenlife"] = sets["chicken_hp"];
PwnPots["chickenmana"] = sets["chicken_mp"];
PwnPots["LifeThresh"] = sets["heal_pot"];
PwnPots["ManaThresh"] = sets["mana_pot"];
PwnPots["LifeRejuvThresh"] = sets["heal_hp"];
PwnPots["ManaRejuvThresh"] = sets["heal_mp"];
PwnPots["MercFavorsJuves"] = sets["merc_rejfirst"];
PwnPots["mercpotionlife"] = sets["merc_pot"];
PwnPots["mercpotionreju"] = sets["merc_reju"];
PwnPots["DrinkTimer"] = sets["drink_timer"];
PwnPots["noPotsChicken"] = sets["chicken_nopot"];
PwnPots["mercChickenLife"] = sets["merc_chicken"];
PwnPots["deadMercChicken"] = sets["chicken_mercdead"];
PwnPots["LoopDelay"] = 50;
PwnPots["IgnorePosition"] = false;
PwnPots["QuitOnHostile"] = false;
PwnPots["verbose"] = sets["lifewatch_verbose"];

// There is no need to edit this, unless you know what you are doing

function Init_Daelw() {
	// Autodrinking standalone process by Syadasti (v0.1) & Swedish Power (v0.2 and on)
	// v0.2 severe bugfixes
	// v0.3 added Mana drinking
	// v0.4 added Rejuvenation logic
	// v0.5 improved the logic
	// v0.6 bugfix
	// v1.5 maintained by HPB_forever for pwnage pindle

	PwnPots["myarea"] = me.area;
	PwnPots["_tMyLastDrink"] = 0;
	PwnPots["_tMercLastDrink"] = 0;
	PwnPots["FailedDrinks"] = 0;
	PwnPots["outOfPots"] = false;
	PwnPots["havemerc"] = false;
	PwnPots["mercAlive"] = false;
	PwnPots["startpotions"] = false;
	PwnPots["mercname"] = "";
	PwnPots["mymaxlife"] = me.hpmax;
	PwnPots["mymaxmana"] = me.mpmax;
	PwnPots["basemaxlife"] = PwnPots["mymaxlife"];
	PwnPots["basemaxmana"] = PwnPots["mymaxmana"];
	PwnPots["currentmaxlife"] = PwnPots["mymaxlife"];
	PwnPots["currentmaxmana"] = PwnPots["mymaxmana"];
	PwnPots["workingmaxlife"] = PwnPots["mymaxlife"];
	PwnPots["workingmaxmana"] = PwnPots["mymaxmana"];
	PwnPots["mymercpotionlife"] = parseInt((128 * PwnPots["mercpotionlife"]) / 100);
	PwnPots["mymercpotionreju"] = parseInt((128 * PwnPots["mercpotionreju"]) / 100);

	PwnPots["myMercChickenLife"] = parseInt((128 * PwnPots["mercChickenLife"]) / 100);
	
	me.chickenhp = (PwnPots["chickenlife"]<99)?parseInt((PwnPots["mymaxlife"] * PwnPots["chickenlife"]) / 100):parseInt(PwnPots["chickenlife"]);
	me.chickenmp = (PwnPots["chickenmana"]<99)?parseInt((PwnPots["mymaxmana"] * PwnPots["chickenmana"]) / 100):parseInt(PwnPots["chickenmana"]);
};

function Loop_Daelw() {
		if(!lw_InTown(me) && !PwnPots["startpotions"]) lw_GetReady();
		if ( PwnPots["startpotions"] && PwnPots["myarea"] != me.area ) 
			lw_GetReady();
		if (!lw_InTown(me) && PwnPots["startpotions"])
		{
			PwnPots["currentmaxlife"] = me.hpmax;
			PwnPots["currentmaxmana"] = me.mpmax;
			PwnPots["currenthppct"] = Math.floor(me.hp * 100 / PwnPots["currentmaxlife"]);
			PwnPots["currentmppct"] = Math.floor(me.mp * 100 / PwnPots["currentmaxmana"]);

			if (PwnPots["currentmaxlife"] > PwnPots["workingmaxlife"] &&
				PwnPots["currenthppct"] < (PwnPots["LifeThresh"] > PwnPots["LifeRejuvThresh"] ? PwnPots["LifeThresh"] : PwnPots["LifeRejuvThresh"]))
					PwnPots["workingmaxlife"] = PwnPots["basemaxlife"];
			else
					PwnPots["workingmaxlife"] = PwnPots["currentmaxlife"];

			if (PwnPots["currentmaxmana"] > PwnPots["workingmaxmana"] &&
				PwnPots["currentmppct"] <  (PwnPots["ManaThresh"] > PwnPots["ManaRejuvThresh"] ? PwnPots["ManaThresh"] : PwnPots["ManaRejuvThresh"]))
					PwnPots["workingmaxmana"] = PwnPots["basemaxmana"];
			else
					PwnPots["workingmaxmana"] = PwnPots["currentmaxmana"];
			//lw_CheckUnNormal();
			lw_CheckThresh();
			if (PwnPots["outOfPots"] && PwnPots["noPotsChicken"])
			{   // out of pots, so force a chicken
				print("Oops, no more pots!  I'm outta here...");
				log["Chicken"]++;
				LogSave(0);
				quit ();
			}

			if(PwnPots["havemerc"])
			{
				if (PwnPots["mercAlive"]) lw_CheckMerc();
				if (PwnPots["deadMercChicken"] && PwnPots["havemerc"] && !PwnPots["mercAlive"])
				{   // merc's dead, so force a chicken
					print("Oops, my merc died!  I'm outta here...");
					log["Merc_Chicken"]++;
					LogSave(0);
					quit ();
				}
			}
		}
}

// - ripped from scavenges bloodybarb script
function lw_InTown(e)
{
	if(e.area == 1 || e.area == 40 || e.area == 75 || e.area == 103 || e.area == 109)
		return true;

	return false;
}

// -1 => unable to drink potion (because sequence)
// 0 => no pots
// 1 => OK
function lw_drinkpot(type,target)
{
	var pot = null;

	switch (type.charAt(0).toLowerCase())
	{
		case "r":
			if(target.name==me.name) {
				if(target.hp < PwnPots["mymaxlife"]*.20 || target.mp < PwnPots["mymaxmana"]*.20)
					pot = lw_getPotion("rvl");
			};
			if ( !pot )
				pot = lw_getPotion("rvs");
			if ( !pot )
				pot = lw_getPotion("rvl");
			break;
		case "h": case "m":
			for (var i = 5; i > 0; i--)
			{
				pot = lw_getPotion(type.charAt(0).toLowerCase()+"p" + i.toString());
				if ( pot )
					break;
			}
			break;
	}

	if (pot && pot.getParent() && pot.getParent().name == me.name)
	{
		if (me.classid == 4 && me.mode == 18) {
			lw_Eprint("ÿc8Can't drink right now...");
			return -1;
		};
		
		if(target.name==me.name)
			clickItem(1,pot);
		else
			clickItem(3,pot);

        delay( 100 ); // v0.25 strange behaviour if no delay
		return 1;
	}

	return 0;
}

function lw_getPotion(type)
{
	if(!type)
		return null;
	
	var Pot=getUnit(4,type,100);
	if(Pot) do
	{
		if( Pot.getParent() && Pot.getParent().name == me.name)
			return Pot; 
	} while(Pot && Pot.getNext(type,100))

	Pot=getUnit(4,type,2);
	if(Pot) do
	{
		// not optimal but readable !!
		if( Pot.getParent() && Pot.getParent().name == me.name) {
			if ( (Pot.mode == 2 ) && (PwnPots["IgnorePosition"] || Pot.x<4) )
				return Pot;
		} 
	} while(Pot && Pot.getNext(type,2))
	return null;
}

function lw_CheckThresh()
{
	// and don't drink when dead
	if (me.hp < 1 || me.hp < me.chickenhp || me.mp < me.chickenmp) 
	{
		log["Chicken"]++;
		LogSave(0);
		quit(); // Run away!
	}

	// don't drink more than you can handle
	var tNow = new Date();

	var hppct = Math.floor(me.hp * 100 / PwnPots["workingmaxlife"]);
	var mppct = Math.floor(me.mp * 100 / PwnPots["workingmaxmana"]);

	// ILB override timer when reju
	if ( !(hppct <= PwnPots["LifeRejuvThresh"] || mppct <= PwnPots["ManaRejuvThresh"]) ) {
  	  if (PwnPots["_tMyLastDrink"] && ((tNow - PwnPots["_tMyLastDrink"]) < (PwnPots["DrinkTimer"] * 1000)))
		return false;
	}
	else
  	  if (PwnPots["_tMyLastDrink"] && ((tNow - PwnPots["_tMyLastDrink"]) < 250) )
		return false;

	if (hppct <= PwnPots["LifeThresh"] || mppct <= PwnPots["ManaThresh"] ||
	    hppct <= PwnPots["LifeRejuvThresh"] || mppct <= PwnPots["ManaRejuvThresh"])
	{ // Check hp level
		if (hppct <= PwnPots["LifeRejuvThresh"] || mppct <= PwnPots["ManaRejuvThresh"] ||
		    (hppct <= PwnPots["LifeThresh"] && mppct <= PwnPots["ManaThresh"]))
		{
			potion = "rejuvenation";
		}
		else if (hppct <= PwnPots["LifeThresh"])
			potion = "healing";
		else if (mppct <= PwnPots["ManaThresh"])
			potion = "mana";

		if (me.mode == 0 || me.mode == 17 || (me.classid == 4 && me.mode == 18))
			return;

		if(PwnPots["FailedDrinks"]<3 && PwnPots["verbose"])
			print("Attemting to drink a " + potion + " potion...");
		var result = lw_drinkpot(potion,me);
		if (result == 1)
		{
			if ( PwnPots["verbose"] )
				print("Drinking a "+potion+" potion was a Success!");
			PwnPots["FailedDrinks"] = 0;
		}
		else
		{
			if (result == -1)
				lw_Eprint("Drink attempt FAILED!");
/*			else
				lw_Eprint("Out of " + potion + " potions!");*/

			if (potion == "rejuvenation")
			{
				if (PwnPots["_tMyLastDrink"] && ((tNow - PwnPots["_tMyLastDrink"]) < (PwnPots["DrinkTimer"] * 1000))) //v0.35c
    				return false;
				if(hppct <= PwnPots["LifeThresh"])
					potion = "healing";
				if(mppct <= PwnPots["ManaThresh"])
					potion = "mana";
				else
					potion = "healing";
			}
			else if (potion == "mana" || potion == "healing")
				potion = "rejuvenation";
			if(PwnPots["FailedDrinks"]<3 && PwnPots["verbose"] )
				print("Attemting to drink a "+potion+" potion instead...");
			result = lw_drinkpot(potion,me);
			if (result == 1)
			{
				if ( PwnPots["verbose"] ) 
					print("Drinking a "+potion+" potion was a Success!");
				PwnPots["FailedDrinks"] = 0;
			}
			else if (result == -1 && PwnPots["verbose"] )
				lw_Eprint("Drink attempt FAILED!");
			else
			{
				lw_Eprint("Out of "+potion+" potions too!");
				PwnPots["outOfPots"] = true;
			}
		}

		PwnPots["_tMyLastDrink"] = new Date();
	}
}

function lw_CheckMerc()
{
	var merc = getUnit(1,PwnPots["mercname"]);
	if(!merc) return;

	if (merc.hp < 1)
	{ // Well now, he's dead...  No use in giving him potions
		PwnPots["mercAlive"] = false;
		return;
	}
	if (merc.hp < PwnPots["myMercChickenLife"])
	{
		print("My merc is about to die.  I'm outta here!");
		log["Merc_Chicken"]++;
		LogSave(0);
		quit();
	}

    // don't drink more than you can handle
	var tNow = new Date();
    if ( PwnPots["_tMercLastDrink"] ) {
      var TimeMercLastDrink = (tNow - PwnPots["_tMercLastDrink"]);
      if ( !(merc.hp <= PwnPots["mymercpotionreju"]) ) { // if not reju, check the Drink Timer
  	    if ( TimeMercLastDrink < (PwnPots["DrinkTimer"] * 1000))
	    	return false;
      }
      else // even in case of reju, add some delay
        if ( TimeMercLastDrink < 250 )
          return false;
    };

	if ( (merc.hp <= PwnPots["mymercpotionlife"]) || ( merc.hp <= PwnPots["mymercpotionreju"] ) )
	{ // Check hp level
		if ( merc.hp <= PwnPots["mymercpotionreju"] )
			potion = "rejuvenation";
		else
			potion = "healing";

		if (merc.hp <= 0 || me.mode == 0 || me.mode == 17 || (me.classid == 4 && me.mode == 18))
			return;

		if(PwnPots["FailedDrinks"]<3 && PwnPots["verbose"] )
			print("Attemting to give merc a " + potion + " potion...");
		var result = lw_drinkpot(potion,merc);
		if (result == 1)
		{
			delay(100);
			if ( PwnPots["verbose"] )
				print("Feeding mercenary a "+potion+" potion was a Success!");
			PwnPots["FailedDrinks"] = 0;
		}
		else
		{
			if (result == -1)
				lw_Eprint("Feeding mercernary a potion FAILED!");
/*			else
				lw_Eprint("Out of " + potion + " potions!");*/

			if (potion=="healing") {
                if ( PwnPots["mymercpotionreju"] > 0 )
                  return false; // do not use reju in place of healing if there are a thresh reju
				potion = "rejuvenation";
            }
            else {
				if (PwnPots["_tMercLastDrink"] && ((tNow - PwnPots["_tMercLastDrink"]) < (PwnPots["DrinkTimer"] * 1000))) //v0.35c
    				return false;
				potion = "healing";
			};

			if(PwnPots["FailedDrinks"]<3 && PwnPots["verbose"])
				print("Attemting to give merc a "+potion+" potion instead...");
			result = lw_drinkpot(potion,merc); //v0.25
			if (result == 1)
			{
				delay(100);
				if ( PwnPots["verbose"] )
					print("Feeding mercenary a "+potion+" potion was a Success!");
				PwnPots["FailedDrinks"] = 0;
			}
			else if (result == -1 && PwnPots["verbose"] )
				lw_Eprint("Feeding mercernary a potion FAILED!");
			else if(result == 0)
			{
				lw_Eprint("Out of "+potion+" potions too!");
				PwnPots["outOfPots"] = true;
			}
		}
		PwnPots["_tMercLastDrink"] = new Date();
	}
}

function lw_Eprint(string)
{
	PwnPots["FailedDrinks"]++;
	if (PwnPots["FailedDrinks"]<3) // Stop spamming
		print(string);
	if (PwnPots["FailedDrinks"]==3)
		print("Failed to drink any potions!  Verbose mode turned off!");
}

function lw_GetReady()
{
	// start checking status on first area change
	PwnPots["myarea"] = me.area;
	if(!PwnPots["startpotions"])
		print("Starting the potion loop for "+me.name);
	PwnPots["startpotions"]=true;
	me.chickenhp = (PwnPots["chickenlife"]<99)?parseInt((PwnPots["mymaxlife"] * PwnPots["chickenlife"]) / 100):parseInt(PwnPots["chickenlife"]);
	me.chickenmp = (PwnPots["chickenmana"]<99)?parseInt((PwnPots["mymaxmana"] * PwnPots["chickenmana"]) / 100):parseInt(PwnPots["chickenmana"]);
	
	var merc = lw_GetMerc();
	if (merc) 
	{
		PwnPots["mercname"] = merc.name;
		if(!PwnPots["havemerc"] || !PwnPots["mercAlive"])
			print("Starting the potion loop for "+PwnPots["mercname"]);
		PwnPots["havemerc"] = true;
		PwnPots["mercAlive"] = true;
	};
}

//Missile part

function lw_GetMerc()
{
	var npc = getUnit(1);
	do {
		if (npc && npc.name.length) {
			if (npc.classid == 271 || npc.classid == 338 || npc.classid == 359 || npc.classid == 561) {
				if (npc.getParent() && npc.getParent().name == me.name && npc.hp > 0 && npc.mode != 12) {
					return npc;
				}
			}
		}
	}while(npc && npc.getNext());
	
	return null;
}

function lw_CheckUnNormal()
{
	//new function in 0.47 for drink Throwing pot or Antidote pot(yps),even Stamina.(vps)
	if (!sets["use_special_pot"]) return;
	var frozen = me.getState(11);
	var poison = me.getState(2);
	var needstamina = ((me.getStat(10)/256)<(me.getStat(11)/256*0.05))	
	if (poison)
	{
		var s=LocateItem(me,"yps",100);
    		if (s)
    		{
    			print("You're poisoned,drink an Antidote pot!");
    			clickItem(1,s);
    			delay(200);
    		}
    	}
    	
    	if (frozen)
    	{
    		var s=LocateItem(me,"wms",100);
    		if (s)
    		{
    			print("You're frozen,drink a Thawing pot!");
    			clickItem(1,s);
    			delay(200);
    		}
    	}
    	if (needstamina)
    	{
    		var s=LocateItem(me,"vps",100);
    		if (s)
    		{
    			print("Stamina too low,drink a Stamina pot!");
    			clickItem(1,s);
    			delay(200);
    		}
    	}
    	/*
    	merc=lw_GetMerc();
    	if (!merc) return;
    	
    	if (merc.getState(2))
    	{
    		var s=LocateItem(me,"yps",2);
    		if (s)
    		{
    			print("Your merc is poisoned,feeding an Antidote pot!");
    			clickItem(3,s);
    			delay(200);
    		}
    		else
    		{
    			if (LocateItem(me,"yps",100)
    				fillbelt("yps");
    		}
    				
    	}
    	if (merc.getState(11))
    	{
    		var s=LocateItem(me,"wms",2);
    		if (s)
    		{
    			print("Your merc is frozen,feeding a Thawing pot!");
    			clickItem(3,s);
    			delay(200);
    		}
    		else
    		{
    			if (LocateItem(me,"wms",100)
    				fillbelt("wms");
    		}
    	}
    	*/
    	
}
