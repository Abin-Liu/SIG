/*
        D2JSP-CUBING.D2L
        by Muellsammler

        credits to blue mind for his basic work

Description:
cubes all recipes which need only 1 or 2 different items
before calling the main function DCU_transform() you have to assure that the stash window is open
you should call DCU_UpdateCubeIniAtStartup() before your script loads snagit.ini the first time in game

needs:
a bmpwnit.d2l which is able to add a ini file to snagit.ini
this is needed to collect missing gems only when they're needed
a variable like 'DCU_Snagfile' must be defined in the bmpwnit.d2l

History:
- v0.99, 2004-06-06: rebuild for the d2jsp libs
- v1.00, 2004-06-25: tested with d2jsp libs

todo:
- add recipes with more than 2 different items
- enable the log string for a successful cubed item again

*/

// To make the configuration in your script, just copy this section :

/*
//////////////////////////////////////////////////////////////////////
// Cube Settings
//////////////////////////////////////////////////////////////////////

//////////////////////////////////////////////////////////////////////
// General cubing settings
//====================================================================
// DCU_CubingEnabled = true/false	Switch to (de-)activate the cube lib
// DCU_countrycode = x			Language (0=ger, 1=eng)
// DCU_Snagfile = "tmitems.ini";	File to save missing items (must be known by bmpwnit.d2l)
//--------------------------------------------------------------------

DCU_CubingEnabled = true;
DCU_countrycode = 0;
DCU_Snagfile = "tmitems.ini";


//////////////////////////////////////////////////////////////////////
// Available recipes (maybe there are some more).
// Remove the '//' at the beginning of a line to enable a recipe
//====================================================================

//DCU_Codes.push(["gcw",0,3]);        //Chipped Diamond    gcw
//DCU_Codes.push(["gcv",0,3]);        //Chipped Amethyst    gcv
//DCU_Codes.push(["gcb",0,3]);        //Chipped Saphire    gcb
//DCU_Codes.push(["gcy",0,3]);        //Chipped Topaz        gcy
//DCU_Codes.push(["gcr",0,3]);        //Chipped Ruby        gcr
//DCU_Codes.push(["gcg",0,3]);        //Chipped Emerald    gcg
//DCU_Codes.push(["skc",0,3]);        //Chipped Skull        skc

//DCU_Codes.push(["gfw",0,3]);        //Flawed Diamond    gfw
//DCU_Codes.push(["gfv",0,3]);        //Flawed Amethyst    gfv
//DCU_Codes.push(["gfb",0,3]);        //Flawed Saphire    gfb
//DCU_Codes.push(["gfy",0,3]);        //Flawed Topaz        gfy
//DCU_Codes.push(["gfr",0,3]);        //Flawed Ruby        gfr
//DCU_Codes.push(["gfg",0,3]);        //Flawed Emerald    gfg
//DCU_Codes.push(["skf",0,3]);        //Flawed Skull        skf

//DCU_Codes.push(["gsw",0,3]);        //Normal Diamond    gsw
//DCU_Codes.push(["gsv",0,3]);        //Normal Amethyst    gsv
//DCU_Codes.push(["gsb",0,3]);        //Normal Saphire    gsb
//DCU_Codes.push(["gsy",0,3]);        //Normal Topaz        gsy
//DCU_Codes.push(["gsr",0,3]);        //Normal Ruby        gsr
//DCU_Codes.push(["gsg",0,3]);        //Normal Emerald    gsg
//DCU_Codes.push(["sku",0,3]);        //Normal Skull        sku

//DCU_Codes.push(["glw",0,3]);        //Flawless Diamond    glw
//DCU_Codes.push(["gzv",0,3]);        //Flawless Amethyst    gzv
//DCU_Codes.push(["glb",0,3]);        //Flawless Saphire    glb
//DCU_Codes.push(["gly",0,3]);        //Flawless Topaz    gly
//DCU_Codes.push(["glr",0,3]);        //Flawless Ruby        glr
//DCU_Codes.push(["glg",0,3]);        //Flawless Emerald    glg
//DCU_Codes.push(["skl",0,3]);        //Flawless Skull    skl

//DCU_Codes.push(["r01",0,3]);        //El Rune        r01
//DCU_Codes.push(["r02",0,3]);        //Eld Rune        r02
//DCU_Codes.push(["r03",0,3]);        //Tir Rune        r03
//DCU_Codes.push(["r04",0,3]);        //Nef Rune        r04
//DCU_Codes.push(["r05",0,3]);        //Eth Rune        r05
//DCU_Codes.push(["r06",0,3]);        //Ith Rune        r06
//DCU_Codes.push(["r07",0,3]);        //Tal Rune        r07
//DCU_Codes.push(["r08",0,3]);        //Ral Rune        r08
//DCU_Codes.push(["r09",0,3]);        //Ort Rune        r09

//DCU_Codes.push(["r10",0,3,"gcy",0,1]);    //Thul Rune + chipped Topaz    r10 + gcy
//DCU_Codes.push(["r11",0,3,"gcv",0,1]);    //Amn Rune + chipped Amethyst    r11 + gcv
//DCU_Codes.push(["r12",0,3,"gcb",0,1]);    //Sol Rune + chipped Saphire    r12 + gcb
//DCU_Codes.push(["r13",0,3,"gcr",0,1]);    //Shael Rune + chipped Ruby    r13 + gcr
//DCU_Codes.push(["r14",0,3,"gcg",0,1]);    //Dol Rune + chipped Emerald    r14 + gcg
//DCU_Codes.push(["r15",0,3,"gcw",0,1]);    //Hel Rune + chipped Diamond    r15 + gcw

//DCU_Codes.push(["r16",0,3,"gfy",0,1]);    //Io Rune + flawed Topaz    r16 + gfy
//DCU_Codes.push(["r17",0,3,"gfv",0,1]);    //Lum Rune + flawed Amethyst    r17 + gfv
//DCU_Codes.push(["r18",0,3,"gfb",0,1]);    //Ko Rune + flawed Saphire    r18 + gfb
//DCU_Codes.push(["r19",0,3,"gfr",0,1]);    //Fal Rune + flawed Ruby    r19 + gfr
DCU_Codes.push(["r20",0,3,"gfg",0,1]);    //Lem Rune + flawed Emerald    r20 + gfg
DCU_Codes.push(["r21",0,2,"gfw",0,1]);    //Pul Rune + flawed Diamond    r21 + gfw

DCU_Codes.push(["r22",0,2,"gsy",0,1]);    //Um Rune + Topaz        r22 + gsy
DCU_Codes.push(["r23",0,2,"gsv",0,1]);    //Mal Rune + Amethyst     r23 + gsv
DCU_Codes.push(["r24",0,2,"gsb",0,1]);    //Ist Rune + Saphire         r24 + gsb
DCU_Codes.push(["r25",0,2,"gsr",0,1]);    //Gul Rune + Ruby        r25 + gsr
DCU_Codes.push(["r26",0,2,"gsg",0,1]);    //Vex Rune + Emerald        r26 + gsg
DCU_Codes.push(["r27",0,2,"gsw",0,1]);    //Ohm Rune + Diamond        r27 + gsw

DCU_Codes.push(["r28",0,2,"gly",0,1]);    //Lo Rune + flawless Topaz    r28 + gly
DCU_Codes.push(["r29",0,2,"gzv",0,1]);    //Sur Rune + flawless Amethyst    r29 + gzv
DCU_Codes.push(["r30",0,2,"glb",0,1]);    //Ber Rune + flawless Saphire    r30 + glb
DCU_Codes.push(["r31",0,2,"glr",0,1]);    //Jah Rune + flawless Ruby    r31 + gll
DCU_Codes.push(["r32",0,2,"glg",0,1]);    //Cham Rune + flawless Emerald    r32 + glg


//////////////////////////////////////////////////////////////////////
// Settings for MOD user (NOT USED FOR CLOSED BNET !!)
//====================================================================
// DCU_mod_use = true/false	When you set this to true you have to adjust all 4 following variables !!
// DCU_mod_StashX = 1;		// width of stash
// DCU_mod_StashY = 1;		// hight of stash
// DCU_mod_InvX = 1;		// width of inventory
// DCU_mod_InvY = 1;		// hight of inventory
//--------------------------------------------------------------------

DCU_mod_use = false;
DCU_mod_StashX = 1;
DCU_mod_StashY = 1;
DCU_mod_InvX = 1;
DCU_mod_InvY = 1;


//////////////////////////////////////////////////////////////////////
// End of Cube settings
//////////////////////////////////////////////////////////////////////
*/


/************************************************************************/
/*                                variables                             */
/************************************************************************/
var DCU_Version = "1.00";
var DCU_Scripter = "Muellsammler";
var DCU_Credits = "";

const DCU_EMPTY = 0, DCU_FULL = 1;

var DCU_countrycode = 0;        // language (0=ger, 1=eng)

var DCU_StashX = 6;            // width of stash

var DCU_StashY = 8;            // hight of stash
if (me.gametype==1) DCU_StashY = 8;    // expansion
else DCU_StashY = 4;            // classic

var DCU_InvX = 10;            // width of inventory
var DCU_InvY = 4;            // hight of inventory

var DCU_Stash = new Array(DCU_StashX);    // array for each field of the stash
var DCU_Inven = new Array(DCU_InvX);    // array for each field of the inventory

//array of recipes we wanna use
//(itemcode1, items_found, items_needed[,itemcode2, items_found, items_needed])
var DCU_Codes = new Array();

//temp array for jobs to do, only filled if we have all items for a recipe
var DCU_Jobs = new Array();

//array of items in DCU_Snagfile (itemcode, amount)
var DCU_iniItems = new Array();

//array of jobs which need an ini update to snag missing items (itemcode, amount)
var DCU_iniUpdateItems = new Array();

// file which temporarely adds needed items to snagit.ini
var DCU_Snagfile = "tempitems.ini";

// switch to (de-)activate the cube lib
var DCU_CubingEnabled = false;

// variables for MOD user
var DCU_mod_use = false;
var DCU_mod_StashX = 1;
var DCU_mod_StashY = 1;
var DCU_mod_InvX = 1;
var DCU_mod_InvY = 1;

// evaluation and debugging
var DCU_DebugMode = false;    // spam mode ;)
var DCU_DisplayMode = false;    // no cubing action, only displaying the jobs
var DCU_EvaluationMode = false;    // only for evaluation purposes



/************************************************************************/
/*                             functions                                */
/************************************************************************/

// update of the inv/stash size for MOD usage
function DCU_UpdateUserSettings() {
    if (DCU_mod_use) {
        DCU_StashX = DCU_mod_StashX;
        DCU_StashY = DCU_mod_StashY;
        DCU_InvX = DCU_mod_InvX;
        DCU_InvY = DCU_mod_InvY;
    }
}

// clear the counters in the recipes array
function DCU_clearCounters() {
    DCU_Jobs=new Array();
    DCU_iniUpdateItems=new Array();
    for (var x=0;x<DCU_Codes.length;x++) {
        DCU_Codes[x][1]=0; // clear counter 1
        if (DCU_Codes[x].length>3) DCU_Codes[x][4]=0; // clear counter 2
    }
}

// main function, call this from your scripts
function DCU_transform() {

    if (!DCU_CubingEnabled) return; // cubing not allowed
    DCU_mycube = DCU_getItem("box", 0);
    if (!DCU_mycube) {
        DCU_debugmessage("ÿc0No cube, unable to start Transformer !");
        return;
    }
    
    DCU_UpdateUserSettings(); //check for MOD-mode

    DC_Print(DCU_msg(400));

    DCU_debugmessage("ÿc0Transformer: resetting counters ...");
    DCU_clearCounters(); //reset item counters and job array
    DCU_OpenStash(); // open stash if it isn't already done

    DCU_debugmessage("ÿc0Transformer: checking inventory ...");
    DCU_CheckInventory(); //check inventory blocks (DCU_EMPTY/DCU_FULL)

    DCU_debugmessage("ÿc0Entering transformer itemloop ...");
    while(1) {
        DCU_debugmessage("ÿc0Transformer: clearing cube ...");
        DCU_ClearCube(); // clean the cube
        DCU_debugmessage("ÿc0Transformer: checking jobs ...");
        DCU_CheckJobs(); //fill jobs array if we have all items needed for a recipe and update ini file
        if (DCU_DisplayMode) {
            DCU_DisplayJobs(); //display all jobs, only for evaluation purposes
            return;
        }
        DCU_debugmessage("ÿc0Transformer: updating ini ...");
        DCU_UpdateTransformerIni(); //update the ini for temporary snagitems
        //end of transformer if no jobs left
        if (DCU_Jobs.length==0) {
            DC_Print(DCU_msg(401));
            return; //return to main script if there are no cube jobs
        }
        DCU_debugmessage("ÿc0Transformer: entering cube loop ...");
        DCU_CubeLooper(); // cubing the listed jobs
        DCU_debugmessage("ÿc0Transformer: checking inventory ...");
        DCU_CheckInventory(); //rescanning inventory
        DCU_debugmessage("ÿc0Transformer: cubing successful ...");
        DCU_CloseCube();
        DCU_ReEnterStash();
        //DCU_CloseStash();
    }
    //DCU_stopmessage("<<breakpoint>>"); // evaluation
}

// updates the temp snagit at the start of a run
function DCU_UpdateCubeIniAtStartup() {
         DCU_CheckJobs(); //fill jobs array if we have all items needed for a recipe and update ini file
         DCU_UpdateTransformerIni(); //update the ini for temporary snagitems
}

//only for items which are needed but not snagged by snagit.ini
//these must always be item nr. 2 in the recipe !!!
function DCU_UpdateTransformerIni() {
    //create ini if not exist
    if (DCU_Snagfile) {
            file = fileOpen("settings/" + DCU_Snagfile, 2);
        if (!file) {
            DC_Print(DCU_msg(412)); //creating ini file
            file = fileOpen("settings/" + DCU_Snagfile, 1);
            if (!file) {
                DC_Print(DCU_msg(411));//error, unable to create
                return false;
            }
        }
        file.close();
    }

/*    //get ini entries
    DCU_iniItems=new Array();
    rfile = fileOpen("settings/" + DCU_Snagfile, 0);
    if (rfile) {
        i=0;newcode=false;newamount=false;
        while(!rfile.eof) {
            line = rfile.readLine();
            a = line.split("=");
            if (a.length == 2) {
                switch (a[0]) {
                    case "code":
                        newcode = a[1];
                        break;
                    case "amount":
                        newamount = parseInt(a[1]);
                        break;
                }
            }
            if (newcode && newamount) {
                //DCU_iniItems.push([newcode,newamount]);
                DCU_iniItems.push([newcode,0]); //old value of amount is not interesting
                i++;
                newcode=false;newamount=false;
            }
        }
        rfile.close();
    } else return false;
    //get the special entry (=itemcode) and increase/decrease it
    for (var x=0; x<DCU_iniUpdateItems.length; x++) {
        found=false;
        for (var y=0; y<DCU_iniItems.length; y++) {
            if (DCU_iniItems[y][0]==DCU_iniUpdateItems[x][0]) {
                found=true;
                DCU_iniItems[y][1]= DCU_iniUpdateItems[x][1];
            }
        }
        if (!found) DCU_iniItems.push([DCU_iniUpdateItems[x][0], DCU_iniUpdateItems[x][1]]);
    }

    //save ini
    sfile = fileOpen("settings/" + DCU_Snagfile, 1);
    if (sfile) {
        sfile.writeLine(";automatic generated file, no need of manual changes !");
        sfile.writeLine("");
        for (var x=0; x<DCU_iniItems.length; x++) {
            if (DCU_iniItems[x][1]>=1) {
                sfile.writeLine("[recipe item #" + (x+1) + "]");
                sfile.writeLine("code=" + DCU_iniItems[x][0]);
                sfile.writeLine("amount=" + DCU_iniItems[x][1]);
                sfile.writeLine("");
            }
        }
        sfile.close();
    } else return false;*/

    //save ini
    sfile = fileOpen("settings/" + DCU_Snagfile, 1);
    if (sfile) {
        sfile.writeLine(";automatic generated file, no need of manual changes !");
        sfile.writeLine("");
        if (DCU_iniUpdateItems.length==0) sfile.writeLine(";no item needed");
        for (var x=0; x<DCU_iniUpdateItems.length; x++) {
            if (DCU_iniUpdateItems[x][1]>=1) {
                sfile.writeLine("[recipe item #" + (x+1) + "]");
                sfile.writeLine("code=\"" + DCU_iniUpdateItems[x][0] + "\"");
                sfile.writeLine("amount=" + DCU_iniUpdateItems[x][1]);
                sfile.writeLine("");
            }
        }
        sfile.close();
    } else return false;

    // everything fine
    return true;
}

//evaluation
function DCU_DisplayJobs() {
    DC_Print("jobs to do : "+DCU_Jobs.length);
    DC_Print("recipe : "+DCU_Codes.length);
    DC_Print("ini jobs : "+DCU_iniUpdateItems.length);
    for (var j=0;j<DCU_Jobs.length;j++) {
        if (DCU_Jobs[j].length>3) {
            DC_Print("Job " + (j+1) + " : " + DCU_Jobs[j][0] + " + " + DCU_Jobs[j][3]);
            } else {
            DC_Print("Job " + (j+1) + " : " + DCU_Jobs[j][0]);
            }
    }
}

function DCU_CheckJobs() {

    DCU_clearCounters(); //new

    nextRecipe:
    for (var i=0; i<DCU_Codes.length; i++) {
         loopitem1 = DCU_getItem(DCU_Codes[i][0],0);
        if (loopitem1 && DCU_MyItem(loopitem1)) do {
                DCU_Codes[i][1]++;
            DCU_debugmessage("ÿc0Found a "+loopitem1.name+", itemloc="+loopitem1.itemloc+", mode="+loopitem1.mode);
            if (DCU_Codes[i][1] == DCU_Codes[i][2]) {
                if (DCU_Codes[i].length>3) { //mix recipe
                    needseconditem = true;
                    loopitem2 = DCU_getItem(DCU_Codes[i][3],0);
                    if (loopitem2 && DCU_MyItem(loopitem2)) do {
                            DCU_Codes[i][4]++;
                        DCU_debugmessage("ÿc0Found a "+loopitem2.name+", itemloc="+loopitem2.itemloc+", mode="+loopitem2.mode);
                        if (DCU_Codes[i][4] == DCU_Codes[i][5]) {
                                     DCU_Jobs.push([DCU_Codes[i][0],DCU_Codes[i][1],DCU_Codes[i][2],DCU_Codes[i][3],DCU_Codes[i][4],DCU_Codes[i][5]]);
                                     DCU_debugmessage("ÿc0Job added, "+loopitem1.name+" - count="+DCU_Codes[i][1]+" + "+loopitem2.name+" - count="+DCU_Codes[i][4]);
                                     needseconditem = false;
                                     //decrease counter in ini-file
                                     //not needed atm
                                     //DCU_iniUpdateItems.push([DCU_Codes[i][3], -DCU_Codes[i][5]]);//syntax ok ??
                                     continue nextRecipe;
                                    }
                    } while (loopitem2 && loopitem2.getNext(DCU_Codes[i][3],0));
                    if (needseconditem){
                        //increase counter in ini-file
                        DCU_iniUpdateItems.push([DCU_Codes[i][3], DCU_Codes[i][5]-DCU_Codes[i][4]]);
                    }

                    } else { //normal recipe
                             DCU_Jobs.push([DCU_Codes[i][0],DCU_Codes[i][1],DCU_Codes[i][2]]);
                             DCU_debugmessage("ÿc0Job added, "+loopitem1.name+" - count="+DCU_Codes[i][1]);
                             continue nextRecipe;
                    }
            }
        } while (loopitem1 && loopitem1.getNext(DCU_Codes[i][0],0));
    }
    return false;
}

function DCU_CubeLooper() {

    done=0;
    while (done<DCU_Jobs.length) {
        switch (DCU_Jobs[done].length) {
            case 3:
                // cubing 3 of the same type
                cubeitem=DCU_getItem(DCU_Jobs[done][0],0);
                if (cubeitem && DCU_MyItem(cubeitem)) {
                    for (var y=0;y<DCU_Jobs[done][2];y++) {
                        DCU_MoveItemToCube(cubeitem, 0, y); //item, x location adder, y location adder
                        //if (y!=DCU_Jobs[done][2]-1) cubeitem.getNext();
                        cubeitem.getNext(DCU_Jobs[done][0],0);
                    }
                    }
                break;
            case 6:
                cubeitem=DCU_getItem(DCU_Jobs[done][0],0);
                if (cubeitem && DCU_MyItem(cubeitem)) {
                    for (var y=0;y<DCU_Jobs[done][2];y++) {
                        DCU_MoveItemToCube(cubeitem, 0, y); //item, coordinate in cube
                        //if (y!=DCU_Jobs[done][2]-1) cubeitem.getNext();
                        cubeitem.getNext(DCU_Jobs[done][0],0);
                    }
                }
                cubeitem=DCU_getItem(DCU_Jobs[done][3],0);
                if (cubeitem && DCU_MyItem(cubeitem)) {
                    for (var y=0;y<DCU_Jobs[done][5];y++) {
                        DCU_MoveItemToCube(cubeitem, 1, y); //item, coordinate in cube
                        if (y!=DCU_Jobs[done][5]-1) cubeitem.getNext();
                        cubeitem.getNext(DCU_Jobs[done][3],0);
                    }
                    }
                break;
            default:
                //error, a job with the wrong number of parameters
                DCU_quitmessage("ÿc1Transformer: Wrong parameter count !");
                break;
        }
        DCU_OpenCube();
        DCU_UseCube();
        DCU_ClearCube();
        done++;
    }
    return true;
}

function DCU_ClearCube() {
    var cubeitem;
    cubeitem=DCU_getItem(null,103);
    if (cubeitem) do {
        DCU_OpenCube();
        if (!DCU_MoveItemToStash(cubeitem)) {
            DCU_quitmessage(DCU_msg(402));
        }
    } while (cubeitem.getNext(null,103));
}

//must work out a new function if a recipe uses items with more than 1x1
function DCU_MoveItemToCube(moveitem, xmod, ymod) {  //item, coordinates in cube
    // Clear the spaces they occupied
    switch (moveitem.itemloc) {
        case 0: //inventory
            for (var m=moveitem.x; m<moveitem.x+moveitem.xsize; m++) {
                for (var n=moveitem.y; n<moveitem.y+moveitem.ysize; n++) {
                    DCU_Inven[m][n] = DCU_EMPTY;
                }
            }
            break;
        case 4: //stash
            for (var m=moveitem.x; m<moveitem.x+moveitem.xsize; m++) {
                for (var n=moveitem.y; n<moveitem.y+moveitem.ysize; n++) {
                    DCU_Stash[m][n] = DCU_EMPTY;
                }
            }
            break;
        case 3: //cube
        default:
            infomessage(DCU_msg(407) + moveitem.itemloc + DCU_msg(408));
            break;
    }
    if (!DCU_GetItemtoCursor(moveitem)) {
            DCU_quitmessage(DCU_msg(403));
        }
        if (!DCU_DropItemFromCursor2Location(xmod, ymod, 3)) {
            DCU_quitmessage(DCU_msg(404));
        }
}

function DCU_MoveItemToStash(moveitem) {
    var x,y;
    var xs, ys;
    var i,j;
    var isGood;

    xs=moveitem.xsize;
    ys=moveitem.ysize;

    stashloop:
    for (var x=0; x<DCU_StashX; x++) {
        for (var y=0; y<DCU_StashY; y++) {
            isGood = true;
            DCU_debugmessage("ÿc0trying an item of size ["+xs+","+ys+"] at ["+x+","+y+"]");
            for (var i=x; i<x+xs; i++) {
                for (var j=y; j<y+ys; j++) {
                    if (DCU_Stash[i][j] == DCU_FULL) {
                        isGood = false;
                    }
                }
            }
            if (isGood) {
                DCU_debugmessage("ÿc0stash "+x+"/"+y+" x/y is free");
                break stashloop;
            }
        }
    }

    if (!isGood) return false;

    if (!DCU_GetItemtoCursor(moveitem)) {
        DCU_quitmessage(DCU_msg(405));
    }
    DCU_CloseCube();
    DCU_ReEnterStash();
    DCU_debugmessage("ÿc0Dropping item to stash "+x+"/"+y+" x/y");
    if (!DCU_DropItemFromCursor2Location(x, y, 4)) {
        DCU_quitmessage(DCU_msg(406));
    }
    for (var i=x; i<x+xs; i++) {
        for (var j=y; j<y+ys; j++) {
            DCU_Stash[i][j] = DCU_FULL;
        }
    }
    return true;
}

// enter the stash menu again when it's menu doesn't popup automatically again after closing the cube menu
function DCU_ReEnterStash() {
    DCU_myStash = getUnit(2,"bank");
    if (!DCU_myStash) DCU_quitmessage(DCU_msg(413)); // stash not found
    interwait = 0x19;
    // wait for the stash menu
    for (var x=0; x<10; x++) {
        if(getUIFlag(interwait)) return true; // stash menu is open
        else DCU_PingDel(100);
    }
    // clear the cursor and grab the item from ground
    if (me.itemoncursor) {
        DCU_clearcursor();
        if (me.itemoncursor) DCU_quitmessage(DCU_msg(414)); // unable to drop item
        DCU_CheckDrop();
    }
    // re-enter the stash menu
    for(var trys=1; trys<=5; trys++) {
        DCU_walkto(DCU_myStash.x, DCU_myStash.y);
        DCU_myStash.interact();
        for(var can=0; can<10; can++) {
            if(getUIFlag(interwait)) return true; // stash menu reopened
            DCU_DoDel(100);
        }
    }
    DCU_quitmessage(DCU_msg(415)); // unable to reenter stash menu
}

function DCU_CheckInventory() {
    var invitem;
    var invitemx, invitemy;

    for (var x=0; x<DCU_InvX; x++) {
        DCU_Inven[x] = new Array(DCU_InvY);
        for (var y=0; y<DCU_InvY; y++) {
            DCU_Inven[x][y] = DCU_EMPTY;
        }
    }

    invitem = DCU_getItem(null,100);
    if (invitem) do {
        if (DCU_MyItem(invitem)) {
            invitemy = invitem.y;
            invitemx = invitem.x;
            for (var y = 0; y < invitem.ysize; y++) {
                for (var x = 0; x < invitem.xsize; x++) {
                    DCU_Inven[x + invitemx][y + invitemy] = DCU_FULL;
                }
            }
        }
    } while (invitem.getNext(null,100));

    for (var x=0; x<DCU_StashX; x++) {
        DCU_Stash[x] = new Array(DCU_StashY);
        for (var y=0; y<DCU_StashY; y++) {
            DCU_Stash[x][y] = DCU_EMPTY;
        }
    }

    invitem = DCU_getItem(null,104);
    if (invitem) do {
        if (DCU_MyItem(invitem)) {
            invitemy = invitem.y;
            invitemx = invitem.x;
            for (var y = 0; y < invitem.ysize; y++) {
                for (var x = 0; x < invitem.xsize; x++) {
                    DCU_Stash[x + invitemx][y + invitemy] = DCU_FULL;
                }
            }
        }
    } while (invitem.getNext(null,104));
}



/************************************************************************/
/*                     message functions/variables                      */
/************************************************************************/

// places the text depending on DCU_countrycode (0=ger=default, 1=eng)
function DCU_msg(textnumber) {
    if (DCU_string[textnumber] && DCU_string[textnumber][DCU_countrycode]) {
        return DCU_string[textnumber][DCU_countrycode];
    }
    else return DCU_string[0][DCU_countrycode]
}

var DCU_string= new Array();

DCU_string[400]=new Array("ÿc4"+DCU_Scripter+"s Transformer "+DCU_Version+" gestartet "+DCU_Credits,"ÿc4"+DCU_Scripter+"s Transformer "+DCU_Version+" started "+DCU_Credits);
DCU_string[401]=new Array("ÿc4Transformer beendet","ÿc4Transformer done");
DCU_string[402]=new Array("ÿc1Transformer: Kann ein Item nicht aus dem Cube nehmen !","ÿc1Transformer: Couldn't move item out of cube !");
DCU_string[403]=new Array("ÿc1Transformer: Bekomme ein Item nicht an den Cursor !","ÿc1Transformer: Unable to get item to the cursor !");
DCU_string[404]=new Array("ÿc1Transformer: Kann ein Item nicht im Cube ablegen !","ÿc1Transformer: Unable to drop item into the cube !");
DCU_string[405]=new Array("ÿc1Transformer: Bekomme ein Item aus dem Cube nicht an den Cursor !","ÿc1Transformer: Unable to get item from cube to the cursor !");
DCU_string[406]=new Array("ÿc1Transformer: Kann ein Item nicht in der Kiste ablegen !","ÿc1Transformer: Unable to drop item to stash !");
DCU_string[407]=new Array("ÿc1Transformer: Habe ein Item mit unbekannter Herkunft (","ÿc1Transformer: Got an item from unknown location (");
DCU_string[408]=new Array("), bereit für nen Verbindungsabbruch ? :)","), get ready for a CI :)");
//DCU_string[409]=new Array("xxx","xxx");

DCU_string[410]=new Array("ÿc1Transformer: Konnte ini-Datei nicht aktualisieren !","ÿc1Transformer: Unable to update ini file !");
DCU_string[411]=new Array("ÿc1Transformer: Konnte ini-Datei nicht erstellen !","ÿc1Transformer: Unable to create ini file !");
DCU_string[412]=new Array("Transformer: Ini-Datei wird erstellt !","Transformer: Creating ini file !");
DCU_string[413]=new Array("ÿc1Transformer: Kiste nicht gefunden !","ÿc1Transformer: Can't find my stash !");
DCU_string[414]=new Array("ÿc1Transformer: Kann ein Item nicht fallenlassen !","ÿc1Transformer: Unable to drop an item !");
DCU_string[415]=new Array("ÿc1Transformer: Meine Kiste reagiert nicht !","ÿc1Transformer: Can't interact with my stash !");
//DCU_string[416]=new Array("xxx","xxx");
//DCU_string[417]=new Array("xxx","xxx");
//DCU_string[418]=new Array("xxx","xxx");
//DCU_string[419]=new Array("xxx","xxx");

DCU_string[420]=new Array("ÿc1Transformer: Kiste öffnen nicht möglich !","ÿc1Transformer: Unable to open stash window !");
DCU_string[421]=new Array("ÿc1Transformer: Kiste schließen nicht möglich !","ÿc1Transformer: Unable to close stash window !");
DCU_string[422]=new Array("ÿc1Transformer: Cube öffnen nicht möglich !","ÿc1Transformer: Unable to open cube window !");
DCU_string[423]=new Array("ÿc1Transformer: Cube schließen nicht möglich !","ÿc1Transformer: Unable to close cube window !");
DCU_string[424]=new Array("ÿc1Transformer: Cube nicht gefunden !","ÿc1Transformer: Cube not found !");
//DCU_string[425]=new Array("xxx","xxx");
//DCU_string[426]=new Array("xxx","xxx");
//DCU_string[427]=new Array("xxx","xxx");
//DCU_string[428]=new Array("xxx","xxx");
//DCU_string[429]=new Array("xxx","xxx");



/************************************************************************/
/* functions which could be used from other libs, modify to your needs  */
/************************************************************************/

function DCU_quitmessage(message) {
    if (DCU_EvaluationMode) DCU_stopmessage(message);
    DC_Print(message);
    delay(500);
    quit();
    //quitmessage(message);
}

function DCU_stopmessage(message) {
    DC_Print(message);
    delay(500);
    quit();
    //stopmessage(message);
}

function DCU_debugmessage(message) {
    if (DCU_DebugMode) DC_Print(message);
    //debugmessage(message);
}

// we don't wanna use items which are not belonging to us ;)
function DCU_MyItem(item) {
         parent = item.getParent();
     if (parent && parent.name == me.name) return true;
     return false;
}

function DCU_getItem(a, b) { return getUnit(4, a, b); }

//open the stash
function DCU_OpenStash() {
    if(getUIFlag(0x19)==1) return;
    DCU_mychest = getUnit(2,"bank");
    for(var trys=1; trys<=5; trys++) {
        DCU_mychest.interact();
        for(var can=0; can<20; can++) {
            if(getUIFlag(0x19)==1) return;
            delay(50);
        }
    }
    DCU_quitmessage(DCU_msg(420));
}

//close the stash
function DCU_CloseStash() {
    if(getUIFlag(0x19)==0) return;
    //mychest = getUnit(2,"bank");
    for(var trys=1; trys<=5; trys++) {
        me.cancel(0);
        for(var can=0; can<20; can++) {
            if(getUIFlag(0x19)==0) return;
            delay(50);
        }
    }
    DCU_quitmessage(DCU_msg(421));
}

//open the cube
function DCU_OpenCube() {
    DCU_mycube = DCU_getItem("box", 0);
    if (!DCU_mycube) DCU_quitmessage(DCU_msg(424));
    if(getUIFlag(0x1a)==1) return;
    for(var trys=1; trys<=5; trys++) {
        clickItem(1,DCU_mycube);
        for(var can=0; can<20; can++) {
            if(getUIFlag(0x1a)==1) return;
            delay(50);
        }
    }
    DCU_quitmessage(DCU_msg(422));
}

//close the cube
function DCU_CloseCube() {
    if(getUIFlag(0x1a)==0) return;
    for(var trys=1; trys<=5; trys++) {
        me.cancel(0);
        for(var can=0; can<20; can++) {
            if(getUIFlag(0x1a)==0) return;
            delay(50);
        }
    }
    DCU_quitmessage(DCU_msg(423));
}

//transmute
function DCU_UseCube() {
    cubeitemsbefore = 0;
    cubeitems = DCU_getItem(null, 103);
    if (cubeitems) do {
        cubeitemsbefore++;
    } while (cubeitems.getNext(null, 103));
    if (cubeitemsbefore<2) return false;
    for (var x=0; x<5; x++) {
        cubeitemsafter = 0;
        transmute();
        delay(300);
        cubeitems = DCU_getItem(null, 103);
        if (cubeitems) do {
            cubeitemsafter++;
        } while (cubeitems.getNext(null, 103));
        if (cubeitemsafter < cubeitemsbefore) {
            if (cubeitemsafter == 1) {
                newitem = DCU_getItem(null, 103);
                if (newitem && !DCU_DontLog) {
                    logstring = "ÿc1";
                    logstring += DCU_ImproveFName(newitem.fname);
                    DCU_SlogString(logstring, "Cubed", 1);
                }
            }
            return true;
        }
    }
    return false;
}

function DCU_DropItemFromCursor2Location(x, y, location) { //location: 4=stash, 3=cube
    for(trys=1; trys<=5; trys++) {
        clickItem(0,x,y,location);
        for (up = 0; up < 20; up++) {
            if(!me.itemoncursor) return true;
            delay(50);
        }
    }
    return false;
}

function DCU_GetItemtoCursor(pickitem) {
    for(var trys=1; trys<=5; trys++) {
        clickItem(0,pickitem);
        for (var up = 0; up < 20; up++) {
            if(me.itemoncursor) return true;
            delay(50);
        }
    }
    return false;
}

// against some unwanted characters in a item.fname string
function DCU_ImproveFName(checkString) {
    // cutting 4 letters when finding a "["
    while ((where = checkString.indexOf("[")) != -1) {
        checkString = checkString.substring(0,where) +
            checkString.substring(where+4);
    }
    // cutting CRLFs and rearanging the name (Tshako Harle --> Harle Tshako)
    while ((where = checkString.indexOf("\x0A")) != -1) {
        checkString = checkString.substring(where+1) + " " +
            checkString.substring(0,where);
    }
    // changing double spaces to single spaces
    while ((where = checkString.indexOf("  ")) != -1) {
        checkString = checkString.substring(0,where) +
            checkString.substring(where+1);
    }
    // cutting spaces at the end of the string
    while (checkString.substring(checkString.length-1) == " ") {
        checkString = checkString.substring(0,checkString.length-1);
    }
    // cutting leading spaces
    while (checkString.substring(0,1) == " ") {
        checkString = checkString.substring(1);
    }
    // clear all "undefined"
    while ((undef = checkString.indexOf("undefined")) != -1)
        checkString = checkString.substring(0,undef) + checkString.substring(undef+9);

    return checkString;
}

/************************************************************************/
/*          functions/variables which are used from other libs          */
/************************************************************************/

function DCU_clearcursor() { return DC_ClearCursor(); } // ok
function DCU_CheckDrop() { return DSN_CheckGround(); } // ok
function DCU_PingDel(msecs) { return DC_PingDel(msecs); } // ok
function DCU_DoDel(msecs) { return  DC_DoDel(msecs); } // ok
function DCU_walkto(x, y) { return DM_WalkTo(x, y); } // ok
//function DCU_SlogString(a, b, c) { return SlogString(a, b, c); } // function from old bmpwnit to add a log string to the snagitem log
function DCU_SlogString(a, b, c) { return true } // need to find the corresponding function

//var DCU_DontLog = DontLog; // variable which enables the logging of the cubed item
var DCU_DontLog = true; // no logging until we found the function to create a log string


